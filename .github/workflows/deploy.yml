name: Deploy Application

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  deploy-streamlit:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test application startup
      env:
        VISION_AGENT_API_KEY: ${{ secrets.VISION_AGENT_API_KEY }}
      run: |
        # Test that the application can start without errors
        python -c "
        import sys
        sys.path.append('.')
        try:
            from batch_processor import BatchProcessor
            from app import main
            print('✅ Application modules load successfully')
        except Exception as e:
            print(f'❌ Application startup failed: {e}')
            sys.exit(1)
        "

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r *.py requirements.txt README.md deployment/
        cd deployment
        zip -r ../wms-invoice-processor.zip .

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: wms-invoice-processor
        path: wms-invoice-processor.zip

  deploy-docker:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.9-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY *.py ./
        COPY extract-results.json ./

        # Create results directory
        RUN mkdir -p results

        # Expose Streamlit port
        EXPOSE 8501

        # Set environment variables
        ENV PYTHONPATH=/app
        ENV STREAMLIT_SERVER_HEADLESS=true
        ENV STREAMLIT_SERVER_PORT=8501

        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:8501/_stcore/health || exit 1

        # Default command
        CMD ["streamlit", "run", "app.py", "--server.address", "0.0.0.0"]
        EOF

    - name: Build Docker image
      run: |
        docker build -t wms-invoice-processor:${{ github.ref_name }} .
        docker tag wms-invoice-processor:${{ github.ref_name }} wms-invoice-processor:latest

    - name: Test Docker image
      run: |
        # Test that the container can start (without API key for basic test)
        docker run --rm -d --name test-container -p 8501:8501 wms-invoice-processor:latest
        sleep 10
        docker logs test-container
        docker stop test-container || true

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-streamlit, deploy-docker]
    
    steps:
    - uses: actions/checkout@v4

    - name: Create Release Notes
      run: |
        cat > release-notes.md << 'EOF'
        ## Waste Management Invoice Processor Release

        ### Features
        - 🔍 Automated invoice data extraction using LandingAI
        - 🌐 Streamlit web interface for easy file upload
        - ⚡ Batch processing capabilities
        - 🛡️ Type-safe Pydantic schemas
        - 📊 Financial analytics and reporting

        ### Installation
        ```bash
        # Download and extract
        unzip wms-invoice-processor.zip
        cd deployment

        # Set up environment
        python -m venv venv
        source venv/bin/activate  # or venv\Scripts\activate on Windows
        pip install -r requirements.txt

        # Configure API key
        echo "VISION_AGENT_API_KEY=your-key-here" > .env

        # Run application
        streamlit run app.py
        ```

        ### Docker Usage
        ```bash
        docker run -p 8501:8501 -e VISION_AGENT_API_KEY=your-key wms-invoice-processor:latest
        ```

        ### What's Changed
        - Initial release with full invoice processing capabilities
        - Support for Waste Management invoice formats
        - Comprehensive error handling and validation

        **Full Changelog**: https://github.com/barnes21bb/wms-invoices-landingai-api/commits/${{ github.ref_name }}
        EOF

    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: wms-invoice-processor

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          wms-invoice-processor.zip
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}