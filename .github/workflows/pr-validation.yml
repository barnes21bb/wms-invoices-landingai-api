name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8

    - name: Check PR title format
      run: |
        echo "PR Title: ${{ github.event.pull_request.title }}"
        # Basic validation - could be enhanced with conventional commits
        if [[ "${{ github.event.pull_request.title }}" =~ ^(feat|fix|docs|style|refactor|test|chore): ]]; then
          echo "✅ PR title follows conventional format"
        else
          echo "ℹ️ Consider using conventional commit format: feat|fix|docs|style|refactor|test|chore: description"
        fi

    - name: Check for breaking changes
      run: |
        # Check if any critical files were modified
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        if echo "$CHANGED_FILES" | grep -E "(batch_processor\.py|app\.py|requirements\.txt)"; then
          echo "⚠️ Critical files modified - ensure backward compatibility"
        fi

    - name: Validate schema changes
      run: |
        # Check if schema files were modified and validate they still work
        if git diff --name-only origin/main...HEAD | grep -E "(batch_processor\.py|extract-schema-.*\.py)"; then
          echo "🔍 Schema files modified - validating..."
          python -c "
          from batch_processor import WasteManagementInvoiceSchema, LineItem
          print('✅ Schema validation passed')
          "
        fi

    - name: Test documentation
      run: |
        # Check if README was updated and is valid markdown
        if git diff --name-only origin/main...HEAD | grep "README.md"; then
          echo "📚 README updated"
          # Basic markdown validation
          python -c "
          import re
          with open('README.md', 'r') as f:
              content = f.read()
              if '# Waste Management Invoice Processing' in content:
                  print('✅ README structure looks good')
              else:
                  print('⚠️ README might be missing expected content')
          "
        fi

    - name: Check code quality
      run: |
        # Run basic code quality checks
        echo "🔍 Checking code formatting..."
        black --check --diff . || echo "⚠️ Code formatting issues found"
        
        echo "🔍 Checking for common issues..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Code issues found"

    - name: Size check
      run: |
        # Check if the changes are reasonable in size
        ADDED_LINES=$(git diff --shortstat origin/main...HEAD | grep -o '[0-9]* insertion' | grep -o '[0-9]*' || echo "0")
        DELETED_LINES=$(git diff --shortstat origin/main...HEAD | grep -o '[0-9]* deletion' | grep -o '[0-9]*' || echo "0")
        
        echo "Lines added: $ADDED_LINES"
        echo "Lines deleted: $DELETED_LINES"
        
        if [ "$ADDED_LINES" -gt 500 ]; then
          echo "⚠️ Large PR detected ($ADDED_LINES lines added) - consider breaking into smaller PRs"
        fi

  comment-pr:
    runs-on: ubuntu-latest
    needs: validate-pr
    if: always()
    steps:
    - name: Comment on PR
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🤖 PR Validation Summary')
          );

          const commentBody = `## 🤖 PR Validation Summary

          Thanks for your contribution! Here's what was checked:

          - ✅ Basic validation completed
          - 🔍 Code quality checked
          - 📋 Schema validation performed
          - 📚 Documentation reviewed

          ### Next Steps
          1. Ensure all CI checks pass
          2. Address any feedback from reviewers
          3. Update documentation if needed

          ### Useful Commands
          \`\`\`bash
          # Test locally
          python -m pytest
          
          # Format code
          black .
          
          # Run the app
          streamlit run app.py
          \`\`\`

          ---
          *This comment was automatically generated by GitHub Actions*`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
            });
          }